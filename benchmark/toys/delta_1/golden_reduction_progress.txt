======================Reduction starts======================

The spar tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___declaration {id=354,slot_type=translationUnit_2}
    |   |___(+) {id=391,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=394,slot_type=declarationSpecifier}
    |   |___(?) {id=356,slot_type=optional__declaration_1}
    |   |   |___directDeclarator {id=361,slot_type=initDeclaratorList}
    |   |       |___Token:printf {id=390,slot_type=directDeclarator_8}
    |   |       |___(*) {id=363,slot_type=kleene_star__directDeclarator_6}
    |   |           |___directDeclarator_7 {id=364,slot_type=directDeclarator_7}
    |   |               |___Token:( {id=365,slot_type=LeftParen}
    |   |               |___parameterTypeList {id=368,slot_type=alternative__directDeclarator_9}
    |   |               |   |___parameterDeclaration {id=374,slot_type=parameterList}
    |   |               |   |   |___(+) {id=383,slot_type=declarationSpecifiers}
    |   |               |   |   |   |___Token:const {id=389,slot_type=declarationSpecifier}
    |   |               |   |   |   |___Token:char {id=387,slot_type=declarationSpecifier}
    |   |               |   |   |___(?) {id=377,slot_type=alternative__parameterDeclaration_2}
    |   |               |   |       |___Token:* {id=382,slot_type=abstractDeclarator}
    |   |               |   |___(?) {id=370,slot_type=optional__parameterTypeList_2}
    |   |               |       |___parameterTypeList_1 {id=371,slot_type=parameterTypeList_1}
    |   |               |           |___Token:, {id=372,slot_type=Comma}
    |   |               |           |___Token:... {id=373,slot_type=Ellipsis}
    |   |               |___Token:) {id=367,slot_type=RightParen}
    |   |___Token:; {id=357,slot_type=Semi}
    |___functionDefinition {id=6,slot_type=translationUnit_2}
        |___(?) {id=7,slot_type=optional__functionDefinition_1}
        |   |___(+) {id=349,slot_type=declarationSpecifiers}
        |       |___Token:int {id=352,slot_type=declarationSpecifier}
        |___directDeclarator {id=301,slot_type=declarator}
        |   |___Token:main {id=347,slot_type=directDeclarator_8}
        |   |___(*) {id=303,slot_type=kleene_star__directDeclarator_6}
        |       |___directDeclarator_7 {id=304,slot_type=directDeclarator_7}
        |           |___Token:( {id=305,slot_type=LeftParen}
        |           |___parameterList {id=309,slot_type=alternative__directDeclarator_9}
        |           |   |___(+) {id=339,slot_type=parameterDeclaration}
        |           |   |   |___Token:int {id=346,slot_type=declarationSpecifier}
        |           |   |   |___Token:argc {id=344,slot_type=declarationSpecifier}
        |           |   |___(*) {id=311,slot_type=kleene_star__parameterList_1}
        |           |       |___parameterList_2 {id=312,slot_type=parameterList_2}
        |           |           |___Token:, {id=313,slot_type=Comma}
        |           |           |___parameterDeclaration {id=314,slot_type=parameterDeclaration}
        |           |               |___(+) {id=333,slot_type=declarationSpecifiers}
        |           |               |   |___Token:char {id=336,slot_type=declarationSpecifier}
        |           |               |___declarator {id=317,slot_type=alternative__parameterDeclaration_2}
        |           |                   |___(?) {id=318,slot_type=optional__declarator_1}
        |           |                   |   |___Token:* {id=332,slot_type=pointer}
        |           |                   |___directDeclarator {id=319,slot_type=directDeclarator}
        |           |                       |___Token:argv {id=328,slot_type=directDeclarator_8}
        |           |                       |___(*) {id=321,slot_type=kleene_star__directDeclarator_6}
        |           |                           |___directDeclarator_7 {id=322,slot_type=directDeclarator_7}
        |           |                               |___Token:[ {id=323,slot_type=LeftBracket}
        |           |                               |___Token:] {id=325,slot_type=RightBracket}
        |           |___Token:) {id=307,slot_type=RightParen}
        |___compoundStatement {id=9,slot_type=compoundStatement}
            |___Token:{ {id=10,slot_type=LeftBrace}
            |___(?) {id=11,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=14,slot_type=blockItemList}
            |       |___declaration {id=265,slot_type=blockItemList_2}
            |       |   |___(+) {id=297,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=300,slot_type=declarationSpecifier}
            |       |   |___(?) {id=267,slot_type=optional__declaration_1}
            |       |   |   |___initDeclarator {id=270,slot_type=initDeclaratorList}
            |       |   |       |___Token:a {id=296,slot_type=declarator}
            |       |   |       |___(?) {id=272,slot_type=optional__initDeclarator_2}
            |       |   |           |___initDeclarator_1 {id=273,slot_type=initDeclarator_1}
            |       |   |               |___Token:= {id=274,slot_type=Assign}
            |       |   |               |___Token:1 {id=293,slot_type=initializer}
            |       |   |___Token:; {id=268,slot_type=Semi}
            |       |___declaration {id=217,slot_type=blockItemList_2}
            |       |   |___(+) {id=260,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=263,slot_type=declarationSpecifier}
            |       |   |___(?) {id=219,slot_type=optional__declaration_1}
            |       |   |   |___initDeclarator {id=222,slot_type=initDeclaratorList}
            |       |   |       |___Token:b {id=259,slot_type=declarator}
            |       |   |       |___(?) {id=224,slot_type=optional__initDeclarator_2}
            |       |   |           |___initDeclarator_1 {id=225,slot_type=initDeclarator_1}
            |       |   |               |___Token:= {id=226,slot_type=Assign}
            |       |   |               |___additiveExpression {id=238,slot_type=initializer}
            |       |   |                   |___Token:a {id=256,slot_type=multiplicativeExpression}
            |       |   |                   |___(*) {id=240,slot_type=kleene_star__additiveExpression_1}
            |       |   |                       |___additiveExpression_2 {id=241,slot_type=additiveExpression_2}
            |       |   |                           |___Token:+ {id=250,slot_type=alternative__additiveExpression_3}
            |       |   |                           |___Token:1 {id=249,slot_type=multiplicativeExpression}
            |       |   |___Token:; {id=220,slot_type=Semi}
            |       |___expressionStatement {id=148,slot_type=blockItemList_2}
            |       |   |___(?) {id=149,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=166,slot_type=expression}
            |       |   |       |___Token:printf {id=215,slot_type=postfixExpression_4}
            |       |   |       |___(*) {id=168,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___postfixExpression_3 {id=169,slot_type=postfixExpression_3}
            |       |   |               |___Token:( {id=170,slot_type=LeftParen}
            |       |   |               |___(?) {id=171,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=173,slot_type=expression}
            |       |   |               |       |___(+) {id=212,slot_type=assignmentExpression}
            |       |   |               |       |   |___Token:"%d\n" {id=213,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=175,slot_type=kleene_star__expression_1}
            |       |   |               |           |___expression_2 {id=176,slot_type=expression_2}
            |       |   |               |               |___Token:, {id=177,slot_type=Comma}
            |       |   |               |               |___Token:b {id=195,slot_type=assignmentExpression}
            |       |   |               |___Token:) {id=172,slot_type=RightParen}
            |       |   |___Token:; {id=150,slot_type=Semi}
            |       |___expressionStatement {id=99,slot_type=blockItemList_2}
            |       |   |___(?) {id=100,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=117,slot_type=expression}
            |       |   |       |___Token:printf {id=145,slot_type=postfixExpression_4}
            |       |   |       |___(*) {id=119,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___postfixExpression_3 {id=120,slot_type=postfixExpression_3}
            |       |   |               |___Token:( {id=121,slot_type=LeftParen}
            |       |   |               |___(?) {id=122,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___(+) {id=142,slot_type=expression}
            |       |   |               |       |___Token:"hello\n" {id=143,slot_type=StringLiteral}
            |       |   |               |___Token:) {id=123,slot_type=RightParen}
            |       |   |___Token:; {id=101,slot_type=Semi}
            |       |___expressionStatement {id=50,slot_type=blockItemList_2}
            |       |   |___(?) {id=51,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=68,slot_type=expression}
            |       |   |       |___Token:printf {id=96,slot_type=postfixExpression_4}
            |       |   |       |___(*) {id=70,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___postfixExpression_3 {id=71,slot_type=postfixExpression_3}
            |       |   |               |___Token:( {id=72,slot_type=LeftParen}
            |       |   |               |___(?) {id=73,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___(+) {id=93,slot_type=expression}
            |       |   |               |       |___Token:"world\n" {id=94,slot_type=StringLiteral}
            |       |   |               |___Token:) {id=74,slot_type=RightParen}
            |       |   |___Token:; {id=52,slot_type=Semi}
            |       |___jumpStatement {id=23,slot_type=blockItemList_2}
            |           |___alternative__jumpStatement_4 {id=26,slot_type=alternative__jumpStatement_5}
            |           |   |___Token:return {id=27,slot_type=Return}
            |           |   |___(?) {id=28,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=47,slot_type=expression}
            |           |___Token:; {id=25,slot_type=Semi}
            |___Token:} {id=12,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=56==================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]remove whole except first
    int printf(const char*, ...);
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=6}
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus]dd@1
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

1 entries are removed: 2 --> 1.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 2
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 2 from 56 to 46
------------------------------------------------------------


==================Reducing node 6, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int b = a + 1;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


==================Reducing node 9, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


=================Reducing node 11, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (int argc, char *argv[]) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


=================Reducing node 14, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=14}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]remove whole except first
    int main (int argc, char *argv[]) {
      int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]dd@3
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus]dd@1
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

1 entries are removed: 7 --> 6.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 6
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]dd@1
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus]dd@1
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("world\n");
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

2 entries are removed: 8 --> 6.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 3
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus]dd@3
    int main (int argc, char *argv[]) {
      printf("world\n");
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

3 entries are removed: 7 --> 4.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 1
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 14 from 46 to 19
------------------------------------------------------------


=================Reducing node 301, size=19=================

The current best program is the following

    int main (int argc, char *argv[]) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main                          {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int           argc                {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 301
------------------------------------------------------------


=================Reducing node 303, size=19=================

The current best program is the following

    int main (int argc, char *argv[]) {
      printf("world\n");
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main                          {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 303
------------------------------------------------------------


=================Reducing node 304, size=19=================

The current best program is the following

    int main (int argc, char *argv[]) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=304}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 304
------------------------------------------------------------


=================Reducing node 309, size=19=================

The current best program is the following

    int main (int argc, char *argv[]) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular_node]can be epsilon
    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int main (int argc              ) {
      printf("world\n");
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int main (          char *argv[]) {
      printf("world\n");
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

2 entries are removed: 7 --> 5.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 6
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 309 from 19 to 11
------------------------------------------------------------


=================Reducing node 50, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main (                      ) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 50
------------------------------------------------------------


=================Reducing node 51, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (                      ) {
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 51
------------------------------------------------------------


=================Reducing node 68, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=68}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main (                      ) {
      printf           ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main (                      ) {
             "world\n" ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 68
------------------------------------------------------------


=================Reducing node 70, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main (                      ) {
      printf           ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 70
------------------------------------------------------------


=================Reducing node 71, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=71}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 71
------------------------------------------------------------


=================Reducing node 347, size=11=================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 347
------------------------------------------------------------


=================Reducing node 307, size=11=================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 307
------------------------------------------------------------


=================Reducing node 305, size=11=================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 305
------------------------------------------------------------


=================Reducing node 96, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 96
------------------------------------------------------------


=================Reducing node 74, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 74
------------------------------------------------------------


=================Reducing node 73, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (                      ) {
      printf(         );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 73
------------------------------------------------------------


=================Reducing node 93, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=93}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 93
------------------------------------------------------------


=================Reducing node 94, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 94
------------------------------------------------------------


=================Reducing node 72, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 72
------------------------------------------------------------


=================Reducing node 52, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 52
------------------------------------------------------------


=================Reducing node 12, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 12
------------------------------------------------------------


=================Reducing node 10, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


==================Reducing node 7, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 7
------------------------------------------------------------


=================Reducing node 349, size=11=================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=349}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 349
------------------------------------------------------------


=================Reducing node 352, size=11=================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 352
------------------------------------------------------------


==================Reducing node 2, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 5, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


==================Reducing node 8, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 10, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main (                      ) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 13, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=13}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 13
------------------------------------------------------------


=================Reducing node 17, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main (                      ) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17
------------------------------------------------------------


=================Reducing node 18, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main (                      ) {
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18
------------------------------------------------------------


=================Reducing node 35, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=35}
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main (                      ) {
      printf           ;
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main (                      ) {
             "world\n" ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 35
------------------------------------------------------------


=================Reducing node 64, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main                          {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 64
------------------------------------------------------------


=================Reducing node 37, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main (                      ) {
      printf           ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 37
------------------------------------------------------------


=================Reducing node 38, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=38}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 38
------------------------------------------------------------


=================Reducing node 66, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main                          {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 66
------------------------------------------------------------


=================Reducing node 67, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=67}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


=================Reducing node 71, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 71
------------------------------------------------------------


=================Reducing node 70, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 70
------------------------------------------------------------


=================Reducing node 68, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 68
------------------------------------------------------------


=================Reducing node 63, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 63
------------------------------------------------------------


=================Reducing node 41, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 41
------------------------------------------------------------


=================Reducing node 40, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    int main (                      ) {
      printf(         );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 40
------------------------------------------------------------


=================Reducing node 60, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=60}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 60
------------------------------------------------------------


=================Reducing node 61, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 61
------------------------------------------------------------


=================Reducing node 39, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 39
------------------------------------------------------------


=================Reducing node 19, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19
------------------------------------------------------------


=================Reducing node 11, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


==================Reducing node 9, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


==================Reducing node 6, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


=================Reducing node 73, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=73}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 73
------------------------------------------------------------


=================Reducing node 76, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 76
------------------------------------------------------------


#test success = 5
#test failure = 15
#test result cache hits = 13
#test execution cancelled = 2
#node edit action set cache hits = 13
