======================Reduction starts======================

The spar tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___declaration {id=341,slot_type=translationUnit_2}
    |   |___(+) {id=378,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=381,slot_type=declarationSpecifier}
    |   |___(?) {id=343,slot_type=optional__declaration_1}
    |   |   |___directDeclarator {id=348,slot_type=initDeclaratorList}
    |   |       |___Token:printf {id=377,slot_type=directDeclarator_8}
    |   |       |___(*) {id=350,slot_type=kleene_star__directDeclarator_6}
    |   |           |___directDeclarator_7 {id=351,slot_type=directDeclarator_7}
    |   |               |___Token:( {id=352,slot_type=LeftParen}
    |   |               |___parameterTypeList {id=355,slot_type=alternative__directDeclarator_9}
    |   |               |   |___parameterDeclaration {id=361,slot_type=parameterList}
    |   |               |   |   |___(+) {id=370,slot_type=declarationSpecifiers}
    |   |               |   |   |   |___Token:const {id=376,slot_type=declarationSpecifier}
    |   |               |   |   |   |___Token:char {id=374,slot_type=declarationSpecifier}
    |   |               |   |   |___(?) {id=364,slot_type=alternative__parameterDeclaration_2}
    |   |               |   |       |___Token:* {id=369,slot_type=abstractDeclarator}
    |   |               |   |___(?) {id=357,slot_type=optional__parameterTypeList_2}
    |   |               |       |___parameterTypeList_1 {id=358,slot_type=parameterTypeList_1}
    |   |               |           |___Token:, {id=359,slot_type=Comma}
    |   |               |           |___Token:... {id=360,slot_type=Ellipsis}
    |   |               |___Token:) {id=354,slot_type=RightParen}
    |   |___Token:; {id=344,slot_type=Semi}
    |___functionDefinition {id=6,slot_type=translationUnit_2}
        |___(?) {id=7,slot_type=optional__functionDefinition_1}
        |   |___(+) {id=336,slot_type=declarationSpecifiers}
        |       |___Token:int {id=339,slot_type=declarationSpecifier}
        |___directDeclarator {id=289,slot_type=declarator}
        |   |___Token:main {id=334,slot_type=directDeclarator_8}
        |   |___(*) {id=291,slot_type=kleene_star__directDeclarator_6}
        |       |___directDeclarator_7 {id=292,slot_type=directDeclarator_7}
        |           |___Token:( {id=293,slot_type=LeftParen}
        |           |___parameterList {id=297,slot_type=alternative__directDeclarator_9}
        |           |   |___(+) {id=326,slot_type=parameterDeclaration}
        |           |   |   |___Token:int {id=333,slot_type=declarationSpecifier}
        |           |   |   |___Token:argc {id=331,slot_type=declarationSpecifier}
        |           |   |___(*) {id=299,slot_type=kleene_star__parameterList_1}
        |           |       |___parameterList_2 {id=300,slot_type=parameterList_2}
        |           |           |___Token:, {id=301,slot_type=Comma}
        |           |           |___parameterDeclaration {id=302,slot_type=parameterDeclaration}
        |           |               |___(+) {id=320,slot_type=declarationSpecifiers}
        |           |               |   |___Token:char {id=323,slot_type=declarationSpecifier}
        |           |               |___declarator {id=305,slot_type=alternative__parameterDeclaration_2}
        |           |                   |___(?) {id=306,slot_type=optional__declarator_1}
        |           |                   |   |___Token:* {id=319,slot_type=pointer}
        |           |                   |___directDeclarator {id=307,slot_type=directDeclarator}
        |           |                       |___Token:argv {id=315,slot_type=directDeclarator_8}
        |           |                       |___(*) {id=309,slot_type=kleene_star__directDeclarator_6}
        |           |                           |___directDeclarator_7 {id=310,slot_type=directDeclarator_7}
        |           |                               |___Token:[ {id=311,slot_type=LeftBracket}
        |           |                               |___Token:] {id=313,slot_type=RightBracket}
        |           |___Token:) {id=295,slot_type=RightParen}
        |___compoundStatement {id=9,slot_type=compoundStatement}
            |___Token:{ {id=10,slot_type=LeftBrace}
            |___(?) {id=11,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=14,slot_type=blockItemList}
            |       |___declaration {id=254,slot_type=blockItemList_2}
            |       |   |___(+) {id=285,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=288,slot_type=declarationSpecifier}
            |       |   |___(?) {id=256,slot_type=optional__declaration_1}
            |       |   |   |___initDeclarator {id=259,slot_type=initDeclaratorList}
            |       |   |       |___Token:a {id=284,slot_type=declarator}
            |       |   |       |___(?) {id=261,slot_type=optional__initDeclarator_2}
            |       |   |           |___initDeclarator_1 {id=262,slot_type=initDeclarator_1}
            |       |   |               |___Token:= {id=263,slot_type=Assign}
            |       |   |               |___Token:1 {id=281,slot_type=initializer}
            |       |   |___Token:; {id=257,slot_type=Semi}
            |       |___declaration {id=208,slot_type=blockItemList_2}
            |       |   |___(+) {id=249,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=252,slot_type=declarationSpecifier}
            |       |   |___(?) {id=210,slot_type=optional__declaration_1}
            |       |   |   |___initDeclarator {id=213,slot_type=initDeclaratorList}
            |       |   |       |___Token:b {id=248,slot_type=declarator}
            |       |   |       |___(?) {id=215,slot_type=optional__initDeclarator_2}
            |       |   |           |___initDeclarator_1 {id=216,slot_type=initDeclarator_1}
            |       |   |               |___Token:= {id=217,slot_type=Assign}
            |       |   |               |___additiveExpression {id=229,slot_type=initializer}
            |       |   |                   |___Token:a {id=245,slot_type=multiplicativeExpression}
            |       |   |                   |___(*) {id=231,slot_type=kleene_star__additiveExpression_1}
            |       |   |                       |___additiveExpression_2 {id=232,slot_type=additiveExpression_2}
            |       |   |                           |___Token:+ {id=240,slot_type=alternative__additiveExpression_3}
            |       |   |                           |___Token:1 {id=239,slot_type=multiplicativeExpression}
            |       |   |___Token:; {id=211,slot_type=Semi}
            |       |___expressionStatement {id=142,slot_type=blockItemList_2}
            |       |   |___(?) {id=143,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=160,slot_type=expression}
            |       |   |       |___Token:printf {id=206,slot_type=postfixExpression_4}
            |       |   |       |___(*) {id=162,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___postfixExpression_3 {id=163,slot_type=postfixExpression_3}
            |       |   |               |___Token:( {id=164,slot_type=LeftParen}
            |       |   |               |___(?) {id=165,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=167,slot_type=expression}
            |       |   |               |       |___(+) {id=204,slot_type=assignmentExpression}
            |       |   |               |       |   |___Token:"%d\n" {id=205,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=169,slot_type=kleene_star__expression_1}
            |       |   |               |           |___expression_2 {id=170,slot_type=expression_2}
            |       |   |               |               |___Token:, {id=171,slot_type=Comma}
            |       |   |               |               |___Token:b {id=188,slot_type=assignmentExpression}
            |       |   |               |___Token:) {id=166,slot_type=RightParen}
            |       |   |___Token:; {id=144,slot_type=Semi}
            |       |___expressionStatement {id=95,slot_type=blockItemList_2}
            |       |   |___(?) {id=96,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=113,slot_type=expression}
            |       |   |       |___Token:printf {id=139,slot_type=postfixExpression_4}
            |       |   |       |___(*) {id=115,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___postfixExpression_3 {id=116,slot_type=postfixExpression_3}
            |       |   |               |___Token:( {id=117,slot_type=LeftParen}
            |       |   |               |___(?) {id=118,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___(+) {id=137,slot_type=expression}
            |       |   |               |       |___Token:"hello\n" {id=138,slot_type=StringLiteral}
            |       |   |               |___Token:) {id=119,slot_type=RightParen}
            |       |   |___Token:; {id=97,slot_type=Semi}
            |       |___expressionStatement {id=48,slot_type=blockItemList_2}
            |       |   |___(?) {id=49,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=66,slot_type=expression}
            |       |   |       |___Token:printf {id=92,slot_type=postfixExpression_4}
            |       |   |       |___(*) {id=68,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___postfixExpression_3 {id=69,slot_type=postfixExpression_3}
            |       |   |               |___Token:( {id=70,slot_type=LeftParen}
            |       |   |               |___(?) {id=71,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___(+) {id=90,slot_type=expression}
            |       |   |               |       |___Token:"world\n" {id=91,slot_type=StringLiteral}
            |       |   |               |___Token:) {id=72,slot_type=RightParen}
            |       |   |___Token:; {id=50,slot_type=Semi}
            |       |___jumpStatement {id=23,slot_type=blockItemList_2}
            |           |___alternative__jumpStatement_5 {id=24,slot_type=alternative__jumpStatement_5}
            |           |   |___Token:return {id=26,slot_type=Return}
            |           |   |___(?) {id=27,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=45,slot_type=expression}
            |           |___Token:; {id=25,slot_type=Semi}
            |___Token:} {id=12,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=56==================

The current best program is the following

    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]remove whole except first
    int printf(const char*, ...);
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]dd@1
    int printf(const char*, ...);
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus]dd@1
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 2 from 56 to 46
------------------------------------------------------------


==================Reducing node 6, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int b = a + 1;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


==================Reducing node 7, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 7
------------------------------------------------------------


=================Reducing node 289, size=46=================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main                          {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int           argc                {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 289
------------------------------------------------------------


==================Reducing node 9, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


=================Reducing node 336, size=46=================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]can be epsilon
    main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 336
------------------------------------------------------------


=================Reducing node 334, size=46=================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 334
------------------------------------------------------------


=================Reducing node 291, size=46=================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main                          {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 291
------------------------------------------------------------


=================Reducing node 10, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 11, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (int argc, char *argv[]) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


=================Reducing node 12, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 12
------------------------------------------------------------


=================Reducing node 339, size=46=================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 339
------------------------------------------------------------


=================Reducing node 292, size=46=================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main                          {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 292
------------------------------------------------------------


=================Reducing node 14, size=46==================

The current best program is the following

    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]can be epsilon
    int main (int argc, char *argv[]) {
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]remove whole except first
    int main (int argc, char *argv[]) {
      int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]dd@3
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus]dd@1
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
      printf("world\n");
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]dd@2
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]dd@1
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("hello\n");
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus]dd@1
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = a + 1;
      printf("%d\n", b);
      printf("world\n");
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus]dd@3
    int main (int argc, char *argv[]) {
      printf("world\n");
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 14 from 46 to 19
------------------------------------------------------------


=================Reducing node 293, size=19=================

The current best program is the following

    int main (int argc, char *argv[]) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 293
------------------------------------------------------------


=================Reducing node 297, size=19=================

The current best program is the following

    int main (int argc, char *argv[]) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular_node]can be epsilon
    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int main (int argc              ) {
      printf("world\n");
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    int main (          char *argv[]) {
      printf("world\n");
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 297 from 19 to 11
------------------------------------------------------------


=================Reducing node 295, size=11=================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 295
------------------------------------------------------------


=================Reducing node 48, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main (                      ) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 48
------------------------------------------------------------


=================Reducing node 49, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (                      ) {
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 50, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 50
------------------------------------------------------------


=================Reducing node 66, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main (                      ) {
                       ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main (                      ) {
      printf           ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main (                      ) {
             "world\n" ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 66
------------------------------------------------------------


=================Reducing node 92, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 92
------------------------------------------------------------


=================Reducing node 68, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (                      ) {
      printf           ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 68
------------------------------------------------------------


=================Reducing node 69, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main (                      ) {
      printf           ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 69
------------------------------------------------------------


=================Reducing node 70, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 70
------------------------------------------------------------


=================Reducing node 71, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (                      ) {
      printf(         );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 71
------------------------------------------------------------


=================Reducing node 72, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 72
------------------------------------------------------------


=================Reducing node 90, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]can be epsilon
    int main (                      ) {
      printf(         );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 90
------------------------------------------------------------


=================Reducing node 91, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 91
------------------------------------------------------------


==================Reducing node 2, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 5, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


==================Reducing node 6, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


=================Reducing node 62, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main                          {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 62
------------------------------------------------------------


==================Reducing node 8, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 71, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]can be epsilon
    main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 71
------------------------------------------------------------


=================Reducing node 69, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 69
------------------------------------------------------------


=================Reducing node 64, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main                          {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 64
------------------------------------------------------------


==================Reducing node 9, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


=================Reducing node 10, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (                      ) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 11, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


=================Reducing node 74, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 74
------------------------------------------------------------


=================Reducing node 65, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main                          {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 65
------------------------------------------------------------


=================Reducing node 13, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]can be epsilon
    int main (                      ) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 13
------------------------------------------------------------


=================Reducing node 66, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 66
------------------------------------------------------------


=================Reducing node 68, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 68
------------------------------------------------------------


=================Reducing node 17, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main (                      ) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 17
------------------------------------------------------------


=================Reducing node 18, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (                      ) {
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18
------------------------------------------------------------


=================Reducing node 19, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19
------------------------------------------------------------


=================Reducing node 35, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main (                      ) {
                       ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main (                      ) {
      printf           ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    int main (                      ) {
             "world\n" ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 35
------------------------------------------------------------


=================Reducing node 61, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 61
------------------------------------------------------------


=================Reducing node 37, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (                      ) {
      printf           ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 37
------------------------------------------------------------


=================Reducing node 38, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    int main (                      ) {
      printf           ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 38
------------------------------------------------------------


=================Reducing node 39, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 39
------------------------------------------------------------


=================Reducing node 40, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star]dd@1
    int main (                      ) {
      printf(         );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 40
------------------------------------------------------------


=================Reducing node 41, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 41
------------------------------------------------------------


=================Reducing node 59, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus]can be epsilon
    int main (                      ) {
      printf(         );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 59
------------------------------------------------------------


=================Reducing node 60, size=11==================

The current best program is the following

    int main (                      ) {
      printf("world\n");
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 60
------------------------------------------------------------


#test success = 5
#test failure = 41
#test result cache hits = 0
#test execution cancelled = 2
#node edit action set cache hits = 0
