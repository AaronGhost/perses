// Auto-generated by Perses AST.
// DO NOT MODIFY.
grammar PnfC;

optional__primaryExpression_1
    : '__extension__'?
    ;

kleene_plus__primaryExpression_2
    : StringLiteral+
    ;

alternative__primaryExpression_5
    : '(' expression
    | '__builtin_offsetof' '(' typeName ',' unaryExpression
    | '__builtin_va_arg' '(' unaryExpression ',' typeName
    | optional__primaryExpression_1 '(' compoundStatement
    ;

expression
    : assignmentExpression kleene_star__expression_1
    ;

kleene_star__expression_1
    : expression_2*
    ;

expression_2
    : ',' assignmentExpression
    ;

genericSelection
    : '_Generic' '(' assignmentExpression ',' genericAssocList ')'
    ;

compoundStatement
    : '{' optional__compoundStatement_1 '}'
    ;

optional__compoundStatement_1
    : blockItemList?
    ;

unaryExpression
    : '&&' Identifier
    | alternative__unaryExpression_2 '(' typeName ')'
    | alternative__unaryExpression_3 unaryExpression
    | postfixExpression
    | unaryOperator castExpression
    ;

alternative__unaryExpression_2
    : '_Alignof'
    | 'sizeof'
    ;

alternative__unaryExpression_3
    : '++'
    | '--'
    | 'sizeof'
    ;

typeName
    : specifierQualifierList optional__typeName_1
    ;

optional__typeName_1
    : abstractDeclarator?
    ;

assignmentExpression
    : conditionalExpression
    | unaryExpression assignmentOperator assignmentExpression
    ;

genericAssocList
    : genericAssociation kleene_star__genericAssocList_1
    ;

kleene_star__genericAssocList_1
    : genericAssocList_2*
    ;

genericAssocList_2
    : ',' genericAssociation
    ;

genericAssociation
    : alternative__genericAssociation_1 ':' assignmentExpression
    ;

alternative__genericAssociation_1
    : 'default'
    | typeName
    ;

postfixExpression
    : postfixExpression_4 kleene_star__postfixExpression_2
    ;

optional__postfixExpression_1
    : expression?
    ;

kleene_star__postfixExpression_2
    : postfixExpression_3*
    ;

postfixExpression_3
    : '(' optional__postfixExpression_1 ')'
    | '++'
    | '--'
    | '[' expression ']'
    | alternative__postfixExpression_7 Identifier
    ;

postfixExpression_4
    : Constant
    | Identifier
    | alternative__postfixExpression_8 '}'
    | alternative__primaryExpression_5 ')'
    | genericSelection
    | kleene_plus__primaryExpression_2
    ;

optional__postfixExpression_5
    : ','?
    ;

alternative__postfixExpression_7
    : '->'
    | '.'
    ;

alternative__postfixExpression_8
    : optional__primaryExpression_1 '(' typeName ')' '{' initializerList optional__postfixExpression_5
    ;

initializerList
    : optional__initializerList_1 initializer kleene_star__initializerList_3
    ;

optional__initializerList_1
    : designation?
    ;

kleene_star__initializerList_3
    : initializerList_4*
    ;

initializerList_4
    : ',' optional__initializerList_1 initializer
    ;

unaryOperator
    : '!'
    | '&'
    | '*'
    | '+'
    | '-'
    | '~'
    ;

castExpression
    : optional__primaryExpression_1 '(' typeName ')' castExpression
    | unaryExpression
    ;

multiplicativeExpression
    : castExpression kleene_star__multiplicativeExpression_1
    ;

kleene_star__multiplicativeExpression_1
    : multiplicativeExpression_2*
    ;

multiplicativeExpression_2
    : alternative__multiplicativeExpression_4 castExpression
    ;

alternative__multiplicativeExpression_4
    : '%'
    | '*'
    | '/'
    ;

additiveExpression
    : multiplicativeExpression kleene_star__additiveExpression_1
    ;

kleene_star__additiveExpression_1
    : additiveExpression_2*
    ;

additiveExpression_2
    : alternative__additiveExpression_3 multiplicativeExpression
    ;

alternative__additiveExpression_3
    : '+'
    | '-'
    ;

shiftExpression
    : additiveExpression kleene_star__shiftExpression_1
    ;

kleene_star__shiftExpression_1
    : shiftExpression_2*
    ;

shiftExpression_2
    : alternative__shiftExpression_3 additiveExpression
    ;

alternative__shiftExpression_3
    : '<<'
    | '>>'
    ;

relationalExpression
    : shiftExpression kleene_star__relationalExpression_1
    ;

kleene_star__relationalExpression_1
    : relationalExpression_2*
    ;

relationalExpression_2
    : alternative__relationalExpression_5 shiftExpression
    ;

alternative__relationalExpression_5
    : '<'
    | '<='
    | '>'
    | '>='
    ;

equalityExpression
    : relationalExpression kleene_star__equalityExpression_1
    ;

kleene_star__equalityExpression_1
    : equalityExpression_2*
    ;

equalityExpression_2
    : alternative__equalityExpression_3 relationalExpression
    ;

alternative__equalityExpression_3
    : '!='
    | '=='
    ;

andExpression
    : equalityExpression kleene_star__andExpression_1
    ;

kleene_star__andExpression_1
    : andExpression_2*
    ;

andExpression_2
    : '&' equalityExpression
    ;

exclusiveOrExpression
    : andExpression kleene_star__exclusiveOrExpression_1
    ;

kleene_star__exclusiveOrExpression_1
    : exclusiveOrExpression_2*
    ;

exclusiveOrExpression_2
    : '^' andExpression
    ;

inclusiveOrExpression
    : exclusiveOrExpression kleene_star__inclusiveOrExpression_1
    ;

kleene_star__inclusiveOrExpression_1
    : inclusiveOrExpression_2*
    ;

inclusiveOrExpression_2
    : '|' exclusiveOrExpression
    ;

logicalAndExpression
    : inclusiveOrExpression kleene_star__logicalAndExpression_1
    ;

kleene_star__logicalAndExpression_1
    : logicalAndExpression_2*
    ;

logicalAndExpression_2
    : '&&' inclusiveOrExpression
    ;

logicalOrExpression
    : logicalAndExpression kleene_star__logicalOrExpression_1
    ;

kleene_star__logicalOrExpression_1
    : logicalOrExpression_2*
    ;

logicalOrExpression_2
    : '||' logicalAndExpression
    ;

conditionalExpression
    : logicalOrExpression optional__conditionalExpression_2
    ;

conditionalExpression_1
    : '?' expression ':' conditionalExpression
    ;

optional__conditionalExpression_2
    : conditionalExpression_1?
    ;

assignmentOperator
    : '%='
    | '&='
    | '*='
    | '+='
    | '-='
    | '/='
    | '<<='
    | '='
    | '>>='
    | '^='
    | '|='
    ;

constantExpression
    : conditionalExpression
    ;

declaration
    : asmStatement
    | declarationSpecifiers optional__declaration_1 ';'
    | staticAssertDeclaration
    ;

optional__declaration_1
    : initDeclaratorList?
    ;

declarationSpecifiers
    : kleene_plus__declarationSpecifiers_1
    ;

kleene_plus__declarationSpecifiers_1
    : declarationSpecifier+
    ;

initDeclaratorList
    : initDeclarator kleene_star__initDeclaratorList_1
    ;

kleene_star__initDeclaratorList_1
    : initDeclaratorList_2*
    ;

initDeclaratorList_2
    : ',' initDeclarator
    ;

staticAssertDeclaration
    : '_Static_assert' '(' constantExpression ',' kleene_plus__primaryExpression_2 ')' ';'
    ;

asmStatement
    : asmKeyword optional__asmStatement_2 '(' optional__asmStatement_6 kleene_star__asmStatement_12 ')' ';'
    ;

asmStatement_1
    : '__volatile__'
    | 'volatile'
    ;

optional__asmStatement_2
    : asmStatement_1?
    ;

asmStatement_3
    : ',' logicalOrExpression
    ;

kleene_star__asmStatement_4
    : asmStatement_3*
    ;

asmStatement_5
    : logicalOrExpression kleene_star__asmStatement_4
    ;

optional__asmStatement_6
    : asmStatement_5?
    ;

asmStatement_11
    : ':' optional__asmStatement_6
    ;

kleene_star__asmStatement_12
    : asmStatement_11*
    ;

declarationSpecifier
    : '_Noreturn'
    | '_Thread_local'
    | '__declspec' '(' Identifier ')'
    | '__inline__'
    | '__stdcall'
    | 'auto'
    | 'extern'
    | 'inline'
    | 'register'
    | 'static'
    | 'typedef'
    | alignmentSpecifier
    | gccAttributeSpecifier
    | typeQualifier
    | typeSpecifier
    ;

typeSpecifier
    : '_Bool'
    | '_Complex'
    | '__m128'
    | '__m128d'
    | '__m128i'
    | 'char'
    | 'double'
    | 'float'
    | 'int'
    | 'long'
    | 'short'
    | 'signed'
    | 'unsigned'
    | 'void'
    | alternative__typeSpecifier_1 ')'
    | atomicTypeSpecifier
    | enumSpecifier
    | structOrUnionSpecifier
    | typedefName
    ;

alternative__typeSpecifier_1
    : '__extension__' '(' ('__m128' | '__m128d' | '__m128i')
    | '__typeof__' '(' constantExpression
    ;

typeQualifier
    : '_Atomic'
    | 'const'
    | 'restrict'
    | 'volatile'
    ;

alignmentSpecifier
    : '_Alignas' '(' alternative__alignmentSpecifier_1 ')'
    ;

alternative__alignmentSpecifier_1
    : constantExpression
    | typeName
    ;

initDeclarator
    : declarator optional__initDeclarator_2
    ;

initDeclarator_1
    : '=' initializer
    ;

optional__initDeclarator_2
    : initDeclarator_1?
    ;

declarator
    : optional__declarator_1 directDeclarator kleene_star__declarator_2
    ;

optional__declarator_1
    : pointer?
    ;

kleene_star__declarator_2
    : gccDeclaratorExtension*
    ;

initializer
    : '{' initializerList optional__postfixExpression_5 '}'
    | assignmentExpression
    ;

atomicTypeSpecifier
    : '_Atomic' '(' typeName ')'
    ;

structOrUnionSpecifier
    : structOrUnion alternative__structOrUnionSpecifier_2
    ;

optional__structOrUnionSpecifier_1
    : Identifier?
    ;

alternative__structOrUnionSpecifier_2
    : Identifier
    | optional__structOrUnionSpecifier_1 '{' structDeclarationList '}'
    ;

enumSpecifier
    : 'enum' alternative__enumSpecifier_4
    ;

alternative__enumSpecifier_4
    : Identifier
    | optional__structOrUnionSpecifier_1 '{' enumeratorList optional__postfixExpression_5 '}'
    ;

typedefName
    : Identifier
    ;

structOrUnion
    : 'struct'
    | 'union'
    ;

structDeclarationList
    : kleene_plus__structDeclarationList_3
    ;

structDeclarationList_2
    : structDeclaration
    ;

kleene_plus__structDeclarationList_3
    : structDeclarationList_2+
    ;

structDeclaration
    : specifierQualifierList optional__structDeclaration_1 ';'
    | staticAssertDeclaration
    ;

optional__structDeclaration_1
    : structDeclaratorList?
    ;

specifierQualifierList
    : alternative__specifierQualifierList_3 optional__specifierQualifierList_1
    ;

optional__specifierQualifierList_1
    : specifierQualifierList?
    ;

alternative__specifierQualifierList_3
    : typeQualifier
    | typeSpecifier
    ;

structDeclaratorList
    : structDeclarator kleene_star__structDeclaratorList_1
    ;

kleene_star__structDeclaratorList_1
    : structDeclaratorList_2*
    ;

structDeclaratorList_2
    : ',' structDeclarator
    ;

structDeclarator
    : declarator
    | optional__structDeclarator_1 ':' constantExpression
    ;

optional__structDeclarator_1
    : declarator?
    ;

enumeratorList
    : enumerator kleene_star__enumeratorList_1
    ;

kleene_star__enumeratorList_1
    : enumeratorList_2*
    ;

enumeratorList_2
    : ',' enumerator
    ;

enumerator
    : typedefName optional__enumerator_2
    ;

enumerator_1
    : '=' constantExpression
    ;

optional__enumerator_2
    : enumerator_1?
    ;

gccAttributeSpecifier
    : '__attribute__' '(' '(' gccAttributeList ')' ')'
    ;

pointer
    : alternative__pointer_8 alternative__pointer_5
    ;

optional__pointer_1
    : typeQualifierList?
    ;

alternative__pointer_5
    : optional__pointer_1 optional__declarator_1
    ;

alternative__pointer_8
    : '*'
    | '^'
    ;

directDeclarator
    : directDeclarator_8 kleene_star__directDeclarator_6
    ;

optional__directDeclarator_1
    : identifierList?
    ;

optional__directDeclarator_5
    : assignmentExpression?
    ;

kleene_star__directDeclarator_6
    : directDeclarator_7*
    ;

directDeclarator_7
    : '(' alternative__directDeclarator_9 ')'
    | '[' alternative__directDeclarator_12 ']'
    ;

directDeclarator_8
    : '(' declarator ')'
    | Identifier
    ;

alternative__directDeclarator_9
    : optional__directDeclarator_1
    | parameterTypeList
    ;

alternative__directDeclarator_12
    : alternative__directDeclarator_13 assignmentExpression
    | optional__pointer_1 alternative__directDeclarator_14
    ;

alternative__directDeclarator_13
    : 'static' optional__pointer_1
    | typeQualifierList 'static'
    ;

alternative__directDeclarator_14
    : '*'
    | optional__directDeclarator_5
    ;

gccDeclaratorExtension
    : asmKeyword '(' kleene_plus__primaryExpression_2 ')'
    | gccAttributeSpecifier
    ;

typeQualifierList
    : kleene_plus__typeQualifierList_3
    ;

typeQualifierList_2
    : typeQualifier
    ;

kleene_plus__typeQualifierList_3
    : typeQualifierList_2+
    ;

parameterTypeList
    : parameterList optional__parameterTypeList_2
    ;

parameterTypeList_1
    : ',' '...'
    ;

optional__parameterTypeList_2
    : parameterTypeList_1?
    ;

identifierList
    : Identifier kleene_star__identifierList_1
    ;

kleene_star__identifierList_1
    : identifierList_2*
    ;

identifierList_2
    : ',' Identifier
    ;

asmKeyword
    : '__asm'
    | '__asm__'
    | 'asm'
    ;

gccAttributeList
    : /* Epsilon. */
    | gccAttribute kleene_star__gccAttributeList_2
    ;

gccAttributeList_1
    : ',' gccAttribute
    ;

kleene_star__gccAttributeList_2
    : gccAttributeList_1*
    ;

gccAttribute
    : /* Epsilon. */
    | ~('(' | ')' | ',') optional__gccAttribute_3
    ;

gccAttribute_2
    : '(' optional__postfixExpression_1 ')'
    ;

optional__gccAttribute_3
    : gccAttribute_2?
    ;

parameterList
    : parameterDeclaration kleene_star__parameterList_1
    ;

kleene_star__parameterList_1
    : parameterList_2*
    ;

parameterList_2
    : ',' parameterDeclaration
    ;

parameterDeclaration
    : declarationSpecifiers alternative__parameterDeclaration_2
    ;

alternative__parameterDeclaration_2
    : declarator
    | optional__typeName_1
    ;

abstractDeclarator
    : optional__declarator_1 directAbstractDeclarator kleene_star__declarator_2
    | pointer
    ;

directAbstractDeclarator
    : directAbstractDeclarator_14 kleene_star__directAbstractDeclarator_12
    ;

optional__directAbstractDeclarator_2
    : parameterTypeList?
    ;

kleene_star__directAbstractDeclarator_12
    : directAbstractDeclarator_13*
    ;

directAbstractDeclarator_13
    : '(' optional__directAbstractDeclarator_2 ')' kleene_star__declarator_2
    | '[' alternative__directAbstractDeclarator_17 ']'
    ;

directAbstractDeclarator_14
    : '(' alternative__directAbstractDeclarator_18
    | '[' alternative__directAbstractDeclarator_17 ']'
    ;

alternative__directAbstractDeclarator_17
    : '*'
    | alternative__directDeclarator_13 assignmentExpression
    | optional__pointer_1 optional__directDeclarator_5
    ;

alternative__directAbstractDeclarator_18
    : alternative__directAbstractDeclarator_23 ')' kleene_star__declarator_2
    ;

alternative__directAbstractDeclarator_23
    : abstractDeclarator
    | optional__directAbstractDeclarator_2
    ;

designation
    : designatorList '='
    ;

designatorList
    : kleene_plus__designatorList_3
    ;

designatorList_2
    : designator
    ;

kleene_plus__designatorList_3
    : designatorList_2+
    ;

designator
    : '.' Identifier
    | '[' constantExpression ']'
    ;

statement
    : 'do' statement 'while' '(' expression ')' ';'
    | 'if' '(' expression ')' statement optional__selectionStatement_2
    | alternative__statement_1 ')' statement
    | asmStatement
    | compoundStatement
    | expressionStatement
    | jumpStatement
    | labeledStatement
    ;

alternative__statement_1
    : 'for' '(' alternative__iterationStatement_6
    | alternative__statement_2 '(' expression
    ;

alternative__statement_2
    : 'switch'
    | 'while'
    ;

labeledStatement
    : alternative__labeledStatement_2 ':' statement
    ;

alternative__labeledStatement_2
    : 'case' constantExpression
    | 'default'
    | Identifier
    ;

expressionStatement
    : optional__postfixExpression_1 ';'
    ;

selectionStatement_1
    : 'else' statement
    ;

optional__selectionStatement_2
    : selectionStatement_1?
    ;

alternative__iterationStatement_6
    : alternative__iterationStatement_8 optional__postfixExpression_1 ';' optional__postfixExpression_1
    ;

alternative__iterationStatement_8
    : declaration
    | optional__postfixExpression_1 ';'
    ;

jumpStatement
    : alternative__jumpStatement_5 ';'
    ;

alternative__jumpStatement_3
    : Identifier
    | unaryExpression
    ;

alternative__jumpStatement_5
    : 'break'
    | 'continue'
    | 'goto' alternative__jumpStatement_3
    | 'return' optional__postfixExpression_1
    ;

blockItemList
    : kleene_plus__blockItemList_3
    ;

blockItemList_2
    : blockItem
    ;

kleene_plus__blockItemList_3
    : blockItemList_2+
    ;

blockItem
    : declaration
    | statement
    ;

compilationUnit
    : optional__compilationUnit_1 EOF
    ;

optional__compilationUnit_1
    : translationUnit?
    ;

translationUnit
    : kleene_plus__translationUnit_3
    ;

translationUnit_2
    : externalDeclaration
    ;

kleene_plus__translationUnit_3
    : translationUnit_2+
    ;

externalDeclaration
    : ';'
    | declaration
    | functionDefinition
    ;

functionDefinition
    : optional__functionDefinition_1 declarator optional__functionDefinition_2 compoundStatement
    ;

optional__functionDefinition_1
    : declarationSpecifiers?
    ;

optional__functionDefinition_2
    : declarationList?
    ;

declarationList
    : kleene_plus__declarationList_3
    ;

declarationList_2
    : declaration
    ;

kleene_plus__declarationList_3
    : declarationList_2+
    ;

Auto
    : 'auto'
    ;

Break
    : 'break'
    ;

Case
    : 'case'
    ;

Char
    : 'char'
    ;

Const
    : 'const'
    ;

Continue
    : 'continue'
    ;

Default
    : 'default'
    ;

Do
    : 'do'
    ;

Double
    : 'double'
    ;

Else
    : 'else'
    ;

Enum
    : 'enum'
    ;

Extern
    : 'extern'
    ;

Float
    : 'float'
    ;

For
    : 'for'
    ;

Goto
    : 'goto'
    ;

If
    : 'if'
    ;

Inline
    : 'inline'
    ;

Int
    : 'int'
    ;

Long
    : 'long'
    ;

Register
    : 'register'
    ;

Restrict
    : 'restrict'
    ;

Return
    : 'return'
    ;

Short
    : 'short'
    ;

Signed
    : 'signed'
    ;

Sizeof
    : 'sizeof'
    ;

Static
    : 'static'
    ;

Struct
    : 'struct'
    ;

Switch
    : 'switch'
    ;

Typedef
    : 'typedef'
    ;

Union
    : 'union'
    ;

Unsigned
    : 'unsigned'
    ;

Void
    : 'void'
    ;

Volatile
    : 'volatile'
    ;

While
    : 'while'
    ;

Alignas
    : '_Alignas'
    ;

Alignof
    : '_Alignof'
    ;

Atomic
    : '_Atomic'
    ;

Bool
    : '_Bool'
    ;

Complex
    : '_Complex'
    ;

Generic
    : '_Generic'
    ;

Imaginary
    : '_Imaginary'
    ;

Noreturn
    : '_Noreturn'
    ;

StaticAssert
    : '_Static_assert'
    ;

ThreadLocal
    : '_Thread_local'
    ;

LeftParen
    : '('
    ;

RightParen
    : ')'
    ;

LeftBracket
    : '['
    ;

RightBracket
    : ']'
    ;

LeftBrace
    : '{'
    ;

RightBrace
    : '}'
    ;

Less
    : '<'
    ;

LessEqual
    : '<='
    ;

Greater
    : '>'
    ;

GreaterEqual
    : '>='
    ;

LeftShift
    : '<<'
    ;

RightShift
    : '>>'
    ;

Plus
    : '+'
    ;

PlusPlus
    : '++'
    ;

Minus
    : '-'
    ;

MinusMinus
    : '--'
    ;

Star
    : '*'
    ;

Div
    : '/'
    ;

Mod
    : '%'
    ;

And
    : '&'
    ;

Or
    : '|'
    ;

AndAnd
    : '&&'
    ;

OrOr
    : '||'
    ;

Caret
    : '^'
    ;

Not
    : '!'
    ;

Tilde
    : '~'
    ;

Question
    : '?'
    ;

Colon
    : ':'
    ;

Semi
    : ';'
    ;

Comma
    : ','
    ;

Assign
    : '='
    ;

StarAssign
    : '*='
    ;

DivAssign
    : '/='
    ;

ModAssign
    : '%='
    ;

PlusAssign
    : '+='
    ;

MinusAssign
    : '-='
    ;

LeftShiftAssign
    : '<<='
    ;

RightShiftAssign
    : '>>='
    ;

AndAssign
    : '&='
    ;

XorAssign
    : '^='
    ;

OrAssign
    : '|='
    ;

Equal
    : '=='
    ;

NotEqual
    : '!='
    ;

Arrow
    : '->'
    ;

Dot
    : '.'
    ;

Ellipsis
    : '...'
    ;

Identifier
    : IdentifierNondigit (Digit | IdentifierNondigit)*
    ;

fragment
IdentifierNondigit
    : Nondigit
    | UniversalCharacterName
    ;

fragment
Nondigit
    : [a-zA-Z_]
    ;

fragment
Digit
    : [0-9]
    ;

fragment
UniversalCharacterName
    : '\\U' HexQuad HexQuad
    | '\\u' HexQuad
    ;

fragment
HexQuad
    : HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit
    ;

Constant
    : CharacterConstant
    | FloatingConstant
    | IntegerConstant
    ;

fragment
IntegerConstant
    : BinaryConstant
    | DecimalConstant IntegerSuffix?
    | HexadecimalConstant IntegerSuffix?
    | OctalConstant IntegerSuffix?
    ;

fragment
BinaryConstant
    : '0' [bB] [0-1]+
    ;

fragment
DecimalConstant
    : NonzeroDigit Digit*
    ;

fragment
OctalConstant
    : '0' OctalDigit*
    ;

fragment
HexadecimalConstant
    : HexadecimalPrefix HexadecimalDigit+
    ;

fragment
HexadecimalPrefix
    : '0' [xX]
    ;

fragment
NonzeroDigit
    : [1-9]
    ;

fragment
OctalDigit
    : [0-7]
    ;

fragment
HexadecimalDigit
    : [0-9a-fA-F]
    ;

fragment
IntegerSuffix
    : LongLongSuffix UnsignedSuffix?
    | LongSuffix UnsignedSuffix?
    | UnsignedSuffix LongLongSuffix
    | UnsignedSuffix LongSuffix?
    ;

fragment
UnsignedSuffix
    : [uU]
    ;

fragment
LongSuffix
    : [lL]
    ;

fragment
LongLongSuffix
    : 'LL'
    | 'll'
    ;

fragment
FloatingConstant
    : DecimalFloatingConstant
    | HexadecimalFloatingConstant
    ;

fragment
DecimalFloatingConstant
    : DigitSequence ExponentPart FloatingSuffix?
    | FractionalConstant ExponentPart? FloatingSuffix?
    ;

fragment
HexadecimalFloatingConstant
    : HexadecimalPrefix HexadecimalDigitSequence BinaryExponentPart FloatingSuffix?
    | HexadecimalPrefix HexadecimalFractionalConstant BinaryExponentPart FloatingSuffix?
    ;

fragment
FractionalConstant
    : DigitSequence '.'
    | DigitSequence? '.' DigitSequence
    ;

fragment
ExponentPart
    : 'E' Sign? DigitSequence
    | 'e' Sign? DigitSequence
    ;

fragment
Sign
    : '+'
    | '-'
    ;

fragment
DigitSequence
    : Digit+
    ;

fragment
HexadecimalFractionalConstant
    : HexadecimalDigitSequence '.'
    | HexadecimalDigitSequence? '.' HexadecimalDigitSequence
    ;

fragment
BinaryExponentPart
    : 'P' Sign? DigitSequence
    | 'p' Sign? DigitSequence
    ;

fragment
HexadecimalDigitSequence
    : HexadecimalDigit+
    ;

fragment
FloatingSuffix
    : 'F'
    | 'L'
    | 'f'
    | 'l'
    ;

fragment
CharacterConstant
    : 'L\'' CCharSequence '\''
    | 'U\'' CCharSequence '\''
    | '\'' CCharSequence '\''
    | 'u\'' CCharSequence '\''
    ;

fragment
CCharSequence
    : CChar+
    ;

fragment
CChar
    : EscapeSequence
    | ~['\\\r\n]
    ;

fragment
EscapeSequence
    : HexadecimalEscapeSequence
    | OctalEscapeSequence
    | SimpleEscapeSequence
    | UniversalCharacterName
    ;

fragment
SimpleEscapeSequence
    : '\\' ['"?abfnrtv\\]
    ;

fragment
OctalEscapeSequence
    : '\\' OctalDigit
    | '\\' OctalDigit OctalDigit
    | '\\' OctalDigit OctalDigit OctalDigit
    ;

fragment
HexadecimalEscapeSequence
    : '\\x' HexadecimalDigit+
    ;

StringLiteral
    : EncodingPrefix? '"' SCharSequence? '"'
    ;

fragment
EncodingPrefix
    : 'L'
    | 'U'
    | 'u'
    | 'u8'
    ;

fragment
SCharSequence
    : SChar+
    ;

fragment
SChar
    : '\\\n'
    | '\\\r\n'
    | EscapeSequence
    | ~["\\\r\n]
    ;

ComplexDefine
    : '#' Whitespace? 'define' (~[#])* -> skip

    ;

AsmBlock
    : 'asm' '{' (~['}'])* '}' -> skip

    ;

LineAfterPreprocessing
    : '#line' Whitespace* (~[\r\n])* -> skip

    ;

LineDirective
    : '#' Whitespace? DecimalConstant Whitespace? StringLiteral (~[\r\n])* -> skip

    ;

PragmaDirective
    : '#' Whitespace? 'pragma' Whitespace (~[\r\n])* -> skip

    ;

Whitespace
    : [ \t]+ -> skip

    ;

Newline
    : ('\n'
    | '\r' '\n'?)
 -> skip

    ;

BlockComment
    : '/*' .*? '*/' -> skip

    ;

LineComment
    : '//' (~[\r\n])* -> skip

    ;

