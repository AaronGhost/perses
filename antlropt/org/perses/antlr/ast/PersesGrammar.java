package org.perses.antlr.ast;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;

import java.io.PrintStream;
import java.util.Optional;
import java.util.function.Function;

public final class PersesGrammar extends AbstractPersesAst {
  private final String grammarName;
  private final ImmutableList<AbstractPersesRuleDefAst> rules;
  private final SymbolTable symbolTable;
  private final ImmutableMap<RuleNameRegistry.RuleNameHandle, AbstractPersesRuleDefAst>
      ruleNameToRuleMap;

  public PersesGrammar(
      String grammarName, ImmutableList<AbstractPersesRuleDefAst> rules, SymbolTable symbolTable) {
    this(
        grammarName,
        rules,
        symbolTable,
        rules.stream()
            .collect(
                ImmutableMap.toImmutableMap(
                    AbstractPersesRuleDefAst::getRuleNameHandle, Function.identity())));
  }

  private PersesGrammar(
      String grammarName,
      ImmutableList<AbstractPersesRuleDefAst> rules,
      SymbolTable symbolTable,
      ImmutableMap<RuleNameRegistry.RuleNameHandle, AbstractPersesRuleDefAst> ruleNameToRuleMap) {
    this.grammarName = grammarName;
    this.rules = rules;
    this.symbolTable = symbolTable;
    this.ruleNameToRuleMap = ruleNameToRuleMap;
  }

  public PersesGrammar copyWithNewName(String newGrammarName) {
    return new PersesGrammar(newGrammarName, rules, symbolTable, ruleNameToRuleMap);
  }

  public String getGrammarName() {
    return grammarName;
  }

  public SymbolTable getSymbolTable() {
    return symbolTable;
  }

  public ImmutableList<AbstractPersesRuleDefAst> getRules() {
    return rules;
  }

  public Optional<AbstractPersesRuleDefAst> getRuleDefinition(String ruleName) {
    Optional<RuleNameRegistry.RuleNameHandle> ruleNameHandle =
        symbolTable.getRuleNameRegistry().get(ruleName);
    if (ruleNameHandle.isPresent()) {
      return getRuleDefinition(ruleNameHandle.get());
    } else {
      return Optional.empty();
    }
  }

  public Optional<AbstractPersesRuleDefAst> getRuleDefinition(
      RuleNameRegistry.RuleNameHandle ruleNameHandle) {
    AbstractPersesRuleDefAst def = ruleNameToRuleMap.get(ruleNameHandle);
    return Optional.ofNullable(def);
  }

  public void toSourceCode(PrintStream stream, int indent, boolean multiLineMode) {
    stream.println("// Auto-generated by Perses AST.");
    stream.println("// DO NOT MODIFY.");

    stream.printf("grammar %s;\n", grammarName);
    stream.println();

    for (AbstractPersesRuleDefAst rule : rules) {
      rule.toSourceCode(stream, 0, true);
      stream.println();
    }
  }

  @Override
  public int getChildCount() {
    return rules.size();
  }

  @Override
  public AbstractPersesRuleDefAst getChild(int index) {
    return rules.get(index);
  }

  @Override
  protected String getExtraLabelForTreeStructurePrinting() {
    return super.getExtraLabelForTreeStructurePrinting() + " grammar_name=" + grammarName;
  }

  @Override
  public AstTag getTag() {
    return AstTag.GRAMMAR;
  }

  public boolean isEquivalent(PersesGrammar other) {
    if (!ruleNameToRuleMap.keySet().equals(other.ruleNameToRuleMap.keySet())) {
      return false;
    }
    for (RuleNameRegistry.RuleNameHandle ruleNameHandle : ruleNameToRuleMap.keySet()) {
      if (!ruleNameToRuleMap
          .get(ruleNameHandle)
          .getBody()
          .isEquivalent(other.ruleNameToRuleMap.get(ruleNameHandle).getBody())) {
        return false;
      }
    }
    return true;
  }
}
